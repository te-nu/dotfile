{
    "import": {
        "prefix": "import",
        "body": [
            "import $1 from '$2'"
        ],
        "description": "import ... from ..."
    },
    "vue": {
        "prefix": "newVue",
        "body": [
            "new Vue({",
            "\t$1",
            "})"
        ],
        "description": "new Vue()"
    },
    "silent": {
        "prefix": "VueConfigSilent",
        "body": [
            "Vue.config.silent = ${1:true}"
        ],
        "description": "Vue.config.silent"
    },
    "optionMergeStrategies": {
        "prefix": "VueConfigOptionMergeStrategies",
        "body": [
            "Vue.config.optionMergeStrategies$1"
        ],
        "description": "Vue.config.optionMergeStrategies"
    },
    "devtools": {
        "prefix": "VueConfigDevtools",
        "body": [
            "Vue.config.devtools = ${1:true}"
        ],
        "description": "Vue.config.devtools"
    },
    "errorHandler": {
        "prefix": "VueConfigErrorHandler",
        "body": [
            "Vue.config.errorHandler = function (err, vm) {",
            "\t${1:// handle error}",
            "}"
        ],
        "description": "Vue.config.errorHandler"
    },
    "ignoredElements": {
        "prefix": "VueConfigIgnoredElements",
        "body": [
            "Vue.config.ignoredElements = [",
            "\t'${1}'",
            "]$0"
        ],
        "description": "Vue.config.ignoredElements"
    },
    "keyCodes": {
        "prefix": "VueConfigKeyCodes",
        "body": [
            "Vue.config.keyCodes = {$1}"
        ],
        "description": "Vue.config.keyCodes"
    },

    "extend": {
        "prefix": "vueExtend",
        "body": [
            "Vue.extend({",
            "\ttemplate:${1:template}",
            "})"
        ],
        "description": "Vue.extend( options )"
    },
    "nextTick": {
        "prefix": "VueNextTick",
        "body": [
            "Vue.nextTick({",
            "\t$1",
            "})"
        ],
        "description": "Vue.nextTick( callback, [context] )"
    },
    "set": {
        "prefix": "VueSet",
        "body": [
            "Vue.set({$1, $2, $3})"
        ],
        "description": "Vue.set( object, key, value )"
    },
    "delete": {
        "prefix": "VueDelete",
        "body": [
            "Vue.delete($1, $2)"
        ],
        "description": "Vue.delete( object, key )"
    },
    "directive": {
        "prefix": "VueDirective",
        "body": [
            "Vue.directive(${1:id}${2:, [definition]})"
        ],
        "description": "Vue.directive( id, [definition] )"
    },
    "filter": {
        "prefix": "VueFilter",
        "body": [
            "Vue.filter(${1:id}${2:, [definition]})"
        ],
        "description": "Vue.filter( id, [definition] )"
    },
    "component": {
        "prefix": "VueComponent",
        "body": [
            "Vue.component(${1:id}${2:, [definition]})$0"
        ],
        "description": "Vue.component( id, [definition] )"
    },
    "use": {
        "prefix": "VueUse",
        "body": [
            "Vue.use(${1:plugin})$0"
        ],
        "description": "Vue.use( plugin )"
    },
    "mixin": {
        "prefix": "VueMixin",
        "body": [
            "Vue.mixin(${1:mixin})"
        ],
        "description": "Vue.mixin( mixin )"
    },
    "compile": {
        "prefix": "VueCompile",
        "body": [
            "Vue.compile(${1:template})"
        ],
        "description": "Vue.compile( template )"
    },

    "data": {
        "prefix": "data",
        "body": [
            "data"
        ],
        "description": "just a word"
    },
    "props": {
        "prefix": "props",
        "body": [
            "props"
        ],
        "description": "just a word"
    },
    "propsData": {
        "prefix": "propsData",
        "body": [
            "propsData"
        ],
        "description": "just a word"
    },
    "scopedSlots": {
        "prefix": "scopedSlots",
        "body": [
            "scopedSlots"
        ],
        "description": "just a word"
    },
    "computed": {
        "prefix": "computed",
        "body": [
            "computed"
        ],
        "description": "just a word"
    },
    "methods": {
        "prefix": "methods",
        "body": [
            "methods"
        ],
        "description": "just a word"
    },
    "watch": {
        "prefix": "watch",
        "body": [
            "watch"
        ],
        "description": "just a word"
    },

    "el": {
        "prefix": "el",
        "body": [
            "el"
        ],
        "description": "just a word"
    },
    "template": {
        "prefix": "template",
        "body": [
            "template"
        ],
        "description": "just a word"
    },
    "render": {
        "prefix": "render",
        "body": [
            "render"
        ],
        "description": "just a word"
    },

    "beforeCreate": {
        "prefix": "beforeCreate",
        "body": [
            "beforeCreate"
        ],
        "description": "just a word"
    },
    "created": {
        "prefix": "created",
        "body": [
            "created"
        ],
        "description": "just a word"
    },
    "beforeMount": {
        "prefix": "beforeMount",
        "body": [
            "beforeMount"
        ],
        "description": "just a word"
    },
    "mounted": {
        "prefix": "mounted",
        "body": [
            "mounted"
        ],
        "description": "just a word"
    },
    "beforeUpdate": {
        "prefix": "beforeUpdate",
        "body": [
            "beforeUpdate"
        ],
        "description": "just a word"
    },
    "updated": {
        "prefix": "updated",
        "body": [
            "updated"
        ],
        "description": "just a word"
    },
    "activated": {
        "prefix": "activated",
        "body": [
            "activated"
        ],
        "description": "just a word"
    },
    "deactivated": {
        "prefix": "deactivated",
        "body": [
            "deactivated"
        ],
        "description": "just a word"
    },
    "beforeDestroy": {
        "prefix": "beforeDestroy",
        "body": [
            "beforeDestroy"
        ],
        "description": "just a word"
    },
    "destroyed": {
        "prefix": "destroyed",
        "body": [
            "destroyed"
        ],
        "description": "just a word"
    },

    "directives": {
        "prefix": "directives",
        "body": [
            "directives"
        ],
        "description": "just a word"
    },
    "filters": {
        "prefix": "filters",
        "body": [
            "filters"
        ],
        "description": "just a word"
    },
    "componentWord": {
        "prefix": "component",
        "body": [
            "component"
        ],
        "description": "just a word"
    },
    "components": {
        "prefix": "components",
        "body": [
            "components"
        ],
        "description": "just a word"
    },

    "parent": {
        "prefix": "parent",
        "body": [
            "parent"
        ],
        "description": "just a word"
    },
    "mixins": {
        "prefix": "mixins",
        "body": [
            "mixins"
        ],
        "description": "just a word"
    },
    "name": {
        "prefix": "name",
        "body": [
            "name"
        ],
        "description": "just a word"
    },
    "extends": {
        "prefix": "extends",
        "body": [
            "extends"
        ],
        "description": "just a word"
    },
    "delimiters": {
        "prefix": "delimiters",
        "body": [
            "delimiters"
        ],
        "description": "just a word"
    },
    "functional": {
        "prefix": "functional",
        "body": [
            "functional"
        ],
        "description": "just a word"
    },

    "vm.$data": {
        "prefix": "vmData",
        "body": [
            "${1:vm}.\\$data$2"
        ],
        "description": "Type: Object"
    },
    "vm.$el": {
        "prefix": "vmEl",
        "body": [
            "${1:vm}.\\$el$2"
        ],
        "description": "Type: HTMLElement"
    },
    "vm.$options": {
        "prefix": "vmOptions",
        "body": [
            "${1:vm}.\\$options$2"
        ],
        "description": "Type: Object"
    },
    "vm.$parent": {
        "prefix": "vmParent",
        "body": [
            "${1:vm}.\\$parent$2"
        ],
        "description": "Type: Vue instance"
    },
    "vm.$root": {
        "prefix": "vmRoot",
        "body": [
            "${1:vm}.\\$root$2"
        ],
        "description": "Type: Vue instance"
    },
    "vm.$children": {
        "prefix": "vmChildren",
        "body": [
            "${1:vm}.\\$children$2"
        ],
        "description": "Type: Array<Vue instance>"
    },
    "vm.$slots": {
        "prefix": "vmSlots",
        "body": [
            "${1:vm}.\\$slots$2"
        ],
        "description": "Type: Object"
    },
    "vm.$scopedSlots": {
        "prefix": "vmScopedSlots",
        "body": [
            "$this.\\$scopedSlots.default({",
            "\t",
            "})"
        ],
        "description": "Type: { [name: string]: props => VNode | Array<VNode> }. Read only. Used to programmatically access scoped slots. For each slot, including the default one, the object contains a corresponding function that returns VNodes. Accessing vm.$scopedSlots is most useful when writing a component with a render function."
    },
    "vm.$refs": {
        "prefix": "vmRefs",
        "body": [
            "${1:vm}.\\$refs$2"
        ],
        "description": "Type: Object"
    },
    "vm.$isServer": {
        "prefix": "vmIsServer",
        "body": [
            "${1:vm}.\\$isServer$2"
        ],
        "description": "Type: boolean"
    },

    "vm.$watch": {
        "prefix": "vmWatch",
        "body": [
            "${1:vm}.\\$watch(${2:expOrFn}, ${3:callback})"
        ],
        "description": "vm.$watch( expOrFn, callback, [options] )"
    },
    "vm.$set": {
        "prefix": "vmSet",
        "body": [
            "${1:vm}.\\$set(${2:object}, ${3:key}, ${4:value})"
        ],
        "description": "vm.$set( object, key, value )"
    },
    "vm.$delete": {
        "prefix": "vmDelete",
        "body": [
            "${1:vm}.\\$delete(${2:object}, ${3:key})"
        ],
        "description": "vm.$delete( object, key )"
    },

    "vm.$on": {
        "prefix": "vmOn",
        "body": [
            "${1:vm}.\\$on('${2:event}', ${3:callback})$4"
        ],
        "description": "vm.$on( event, callback )"
    },
    "vm.$once": {
        "prefix": "vmOnce",
        "body": [
            "${1:vm}.\\$once('${2:event}', ${3:callback})$4"
        ],
        "description": "vm.$once( event, callback )"
    },
    "vm.$off": {
        "prefix": "vmOff",
        "body": [
            "${1:vm}.\\$off('${2:event}', ${3:callback})$4"
        ],
        "description": "vm.$off( [event, callback] )"
    },
    "vm.$emit": {
        "prefix": "vmEmit",
        "body": [
            "${1:vm}.\\$emit('${2:event}'${3:, […args]})$4"
        ],
        "description": "vm.$emit( event, […args] )"
    },

    "vm.$mount": {
        "prefix": "vmMount",
        "body": [
            "${1:vm}.\\$mount('$2')"
        ],
        "description": "vm.$mount( [elementOrSelector] )"
    },
    "vm.$forceUpdate": {
        "prefix": "vmForceUpdate",
        "body": [
            "${1:vm}.\\$forceUpdate()"
        ],
        "description": "vm.$forceUpdate()"
    },
    "vm.$nextTick": {
        "prefix": "vmNextTick",
        "body": [
            "${1:vm}.\\$nextTick(${2:callback})"
        ],
        "description": "vm.$nextTick( callback )"
    },
    "vm.$destroy": {
        "prefix": "vmDestroy",
        "body": [
            "${1:vm}.\\$destroy()$2"
        ],
        "description": "vm.$destroy()"
    },

    "renderer": {
        "prefix": "renderer",
        "body": [
            "const ${1:renderer} = require('vue-server-renderer').createRenderer()$0"
        ],
        "description": "require('vue-server-renderer').createRenderer()"
    },
    "createRenderer": {
        "prefix": "createRenderer",
        "body": [
            "createRenderer({",
            "\t$1",
            "})"
        ],
        "description": "createRenderer({ })"
    },
    "renderToString": {
        "prefix": "renderToString",
        "body": [
            "renderToString"
        ],
        "description": "just a word"
    },
    "renderToStream": {
        "prefix": "renderToStream",
        "body": [
            "renderToStream"
        ],
        "description": "just a word"
    },
    "createBundleRenderer": {
        "prefix": "createBundleRenderer",
        "body": [
            "createBundleRenderer"
        ],
        "description": "just a word"
    },
    "bundleRenderer.renderToString": {
        "prefix": "bundleRenderer.renderToString",
        "body": [
            "bundleRenderer.renderToString"
        ],
        "description": "just a word"
    },
    "bundleRenderer.renderToStream": {
        "prefix": "bundleRenderer.renderToStream",
        "body": [
            "bundleRenderer.renderToStream"
        ],
        "description": "just a word"
    },


    "preventDefault":{
        "prefix":"preventDefault",
        "body":[
            "preventDefault();",
            "$1"
        ],
        "description":"preventDefault()"
    },
    "stopPropagation": {
        "prefix": "stopPropagation",
        "body": [
            "stopPropagation();",
            "$1"
        ],
        "description":"stopPropagation()"
    },

    "newVueRouter": {
        "prefix": "newVueRouter",
        "body": [
            "const ${1:router} = new VueRouter({",
            "\t$2",
            "})$0"
        ],
        "description": "const router = newVueRouter({ })"
    },
    "routerBeforeEach": {
        "prefix": "routerBeforeEach",
        "body": [
            "${1:router}.beforeEach((to, from, next) => {",
            "\t${2:// to and from are both route objects}",
            "})$0"
        ],
        "description": "router.beforeEach"
    },
    "routerReplace": {
        "prefix": "routerReplace",
        "body": [
            "${1:router}.replace($2)$0"
        ],
        "description": "router.replace()"
    },
    "routerGo": {
        "prefix": "routerGo",
        "body": [
            "${1:router}.go($2)$0"
        ],
        "description": "router.go()"
    },
    "routerPush": {
        "prefix": "routerPush",
        "body": [
            "${1:router}.push($2)$0"
        ],
        "description": "router.push()"
    },
    "routes": {
        "prefix": "routes",
        "body": [
            "routes: [$1]$0"
        ],
        "description": "routes: []"
    },
    "beforeEnter": {
        "prefix": "beforeEnter",
        "body": [
            "beforeEnter: (to, from, next) => {",
            "\t${1:// ...}",
            "}"
        ],
        "description": "beforeEnter: (to, from, next) => { }"
    },
    "beforeRouteEnter": {
        "prefix": "beforeRouteEnter",
        "body": [
            "beforeRouteEnter: (to, from, next) => {",
            "\t${1:// ...}",
            "}"
        ],
        "description": "beforeRouteEnter: (to, from, next) => { }"
    },
    "beforeRouteLeave": {
        "prefix": "beforeRouteLeave",
        "body": [
            "beforeRouteLeave: (to, from, next) => {",
            "\t${1:// ...}",
            "}"
        ],
        "description": "beforeRouteLeave: (to, from, next) => { }"
    },
    "scrollBehavior": {
        "prefix": "scrollBehavior",
        "body": [
            "scrollBehavior (to, from, savedPosition) {",
            "\t${1:// ...}",
            "}"
        ],
        "description": "scrollBehavior (to, from, savedPosition) { }"
    },
    "path": {
        "prefix": "path",
        "body": [
            "path"
        ],
        "description": "just a word"
    },
    "alias": {
        "prefix": "alias",
        "body": [
            "alias"
        ],
        "description": "just a word"
    },
    "mode": {
        "prefix": "mode",
        "body": [
            "mode"
        ],
        "description": "just a word"
    },
    "children": {
        "prefix": "children",
        "body": [
            "children"
        ],
        "description": "just a word"
    },
    "meta": {
        "prefix": "meta",
        "body": [
            "meta"
        ],
        "description": "just a word"
    },

    "newVuexStore": {
        "prefix": "newVuexStore",
        "body": [
            "const ${1:store} = new Vuex.Store({",
            "\t${2:// ...}",
            "})"
        ],
        "description": "const store = new Vuex.Store({ })"
    },
    "state": {
        "prefix": "state",
        "body": [
            "state"
        ],
        "description": "just a word"
    },
    "getters": {
        "prefix": "getters",
        "body": [
            "getters"
        ],
        "description": "just a word"
    },
    "mutations": {
        "prefix": "mutations",
        "body": [
            "mutations"
        ],
        "description": "just a word"
    },
    "actions": {
        "prefix": "actions",
        "body": [
            "actions"
        ],
        "description": "just a word"
    },
    "modules": {
        "prefix": "modules",
        "body": [
            "modules"
        ],
        "description": "just a word"
    },
    "plugins": {
        "prefix": "plugins",
        "body": [
            "plugins"
        ],
        "description": "just a word"
    },
    "commit": {
        "prefix": "commit",
        "body": [
            "commit"
        ],
        "description": "just a word"
    },
    "dispatch": {
        "prefix": "dispatch",
        "body": [
            "dispatch"
        ],
        "description": "just a word"
    },
    "replaceState": {
        "prefix": "replaceState",
        "body": [
            "replaceState"
        ],
        "description": "just a word"
    },
    "subscribe": {
        "prefix": "subscribe",
        "body": [
            "subscribe"
        ],
        "description": "just a word"
    },
    "registerModule": {
        "prefix": "registerModule",
        "body": [
            "registerModule"
        ],
        "description": "just a word"
    },
    "unregisterModule": {
        "prefix": "unregisterModule",
        "body": [
            "unregisterModule"
        ],
        "description": "just a word"
    },
    "hotUpdate": {
        "prefix": "hotUpdate",
        "body": [
            "hotUpdate"
        ],
        "description": "just a word"
    },
    "mapState": {
        "prefix": "mapState",
        "body": [
            "mapState"
        ],
        "description": "just a word"
    },
    "mapGetters": {
        "prefix": "mapGetters",
        "body": [
            "mapGetters"
        ],
        "description": "just a word"
    },
    "mapActions": {
        "prefix": "mapActions",
        "body": [
            "mapActions"
        ],
        "description": "just a word"
    },
    "mapMutations": {
        "prefix": "mapMutations",
        "body": [
            "mapMutations"
        ],
        "description": "just a word"
    }
}